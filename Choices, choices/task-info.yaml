type: edu
custom_name: stage6
files:
- name: src/encryptdecrypt/Main.java
  visible: true
  text: |
    package encryptdecrypt;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/EncryptDecryptTest.java
  visible: false
  text: |
    import encryptdecrypt.Main;
    import org.hyperskill.hstest.common.FileUtils;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.io.IOException;
    import java.nio.charset.StandardCharsets;
    import java.nio.file.Files;
    import java.nio.file.NoSuchFileException;
    import java.nio.file.Path;
    import java.nio.file.Paths;
    import java.util.List;

    public class EncryptDecryptTest extends StageTest<String> {
        public EncryptDecryptTest() {
            super(Main.class);
        }

        @Override
        public List<TestCase<String>> generate() {
            return List.of(
                new TestCase<String>()
                    .addArguments(
                        "-alg", "unicode",
                        "-mode", "enc",
                        "-key", "5",
                        "-in", "in.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("\\jqhtrj%yt%m~ujwxpnqq&")
                    .addFile("in.txt", "Welcome to hyperskill!"),

                new TestCase<String>()
                    .addArguments(
                        "-key", "0",
                        "-mode", "enc",
                        "-alg", "unicode",
                        "-in", "input.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("Hello")
                    .addFile("input.txt", "Hello"),

                new TestCase<String>()
                    .addArguments(
                        "-key", "1",
                        "-in", "i.txt",
                        "-alg", "unicode",
                        "-out", "output.txt",
                        "-mode", "enc"
                    )
                    .setAttach("123456789")
                    .addFile("i.txt", "012345678"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-in", "input.txt",
                        "-out", "output.txt",
                        "-alg", "unicode",
                        "-key", "5"
                    )
                    .setAttach("Welcome to hyperskill!")
                    .addFile("input.txt", "\\jqhtrj%yt%m~ujwxpnqq&"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-alg", "unicode",
                        "-key", "0",
                        "-in", "input.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("Hi")
                    .addFile("input.txt", "Hi"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "1",
                        "-in", "input.txt",
                        "-alg", "unicode",
                        "-out", "output.txt"
                    )
                    .setAttach("111122223333")
                    .addFile("input.txt", "222233334444"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "5",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("bjqhtrj yt mdujwxpnqq")
                    .addFile("input.txt", "welcome to hyperskill"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "10",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("treasure")
                    .addFile("input.txt", "dbokcebo"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "12",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("cphpchdjcijdjibhdjebhjucspucmdmudbnuccup")
                    .addFile("input.txt", "qdvdqvrxqwxrxwpvrxspvxiqgdiqarairpbiqqid"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "10",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("y")
                    .addFile("input.txt", "i"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "10",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("i")
                    .addFile("input.txt", "y")
            );
        }

        @Override
        public CheckResult check(String reply, String clue) {
            String fileName = "output.txt";
            String output;

            try {
                Path path = Paths.get(FileUtils.CURRENT_DIR + fileName);
                output = Files.readString(path, StandardCharsets.UTF_8);
            } catch (NoSuchFileException e) {
                return new CheckResult(false, "File output.txt not found!");
            } catch (IOException e) {
                return new CheckResult(false, "Cannot read from file!");
            }

            if (!output.trim().equals(clue.trim())) {
                return new CheckResult(false, "Wrong result in the file!");
            }

            return new CheckResult(true);
        }

    }
  learner_created: false
- name: src/encryptdecrypt/output.txt
  visible: true
  learner_created: true
- name: output.txt
  visible: true
  text: 111122223333
  learner_created: true
- name: src/encryptdecrypt/input.txt
  visible: true
  learner_created: true
- name: src/encryptdecrypt/good.txt
  visible: true
  text: |-
    package encryptdecrypt;

    import java.io.*;
    import java.util.Scanner;

    public class Main {

    private static String encryption (String text, int key) {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < text.length(); i++) {
            int shiftByKey = text.charAt(i) + key;
            int shift = shiftByKey > 127 ?
                    shiftByKey - 128
                    : shiftByKey;
            sb.append((char) shift);
        }
        return sb.toString();
    }

    private static String decryption (String encryptedText, int key) {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < encryptedText.length(); i++) {
            int shiftByKey = encryptedText.charAt(i) - key;
            int shift = shiftByKey < 0 ?
                    shiftByKey + 128
                    : shiftByKey;
            sb.append((char) shift);
        }
        return sb.toString();
    }
        public static void main(String[] args) {
            String mode = "enc";
            int key = 0;
            String data = "";
            boolean dataIn = false;
            boolean dataOut = false;
            String inputFile = null;
            String outputFile = null;


            for (int i = 0; i < args.length; i++) {
                if (args[i].contains("-mode")) {
                    mode = args[i + 1];
                }
                if (args[i].contains("-key")) {
                    key = Integer.parseInt(args[i + 1]);
                }
                if (args[i].contains("-data")) {
                    data = args[i + 1];
                }
                if (args[i].contains("-in")) {
                    dataIn = true;
                    inputFile = args[i + 1];
                }
                if (args[i].contains("-out")) {
                    dataOut = true;
                    outputFile = args[i + 1];
                }
            }

            if (dataIn && data.isEmpty()) {
                File file = new File(inputFile);
                StringBuilder fileData = new StringBuilder();
                try(Scanner scanner = new Scanner(file)) {
                    while (scanner.hasNext()) {
                        fileData.append(scanner.nextLine());
                    }
                    data = fileData.toString();
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }

            switch (mode) {
                case "enc":
                    if (!dataOut) {
                        System.out.println(encryption(data, key));
                    } else {
                        try(FileWriter fileWriter = new FileWriter(outputFile)){
                            fileWriter.write(encryption(data, key));
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                    break;
                case "dec":
                    if (!dataOut) {
                        System.out.println(decryption(data, key));
                    } else {
                        try(FileWriter fileWriter = new FileWriter(outputFile)){
                            fileWriter.write(decryption(data, key));
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                    break;
            }
        }
    }
  learner_created: true
- name: src/encryptdecrypt/Main.class
  visible: true
  learner_created: true
- name: src/encryptdecrypt/Finder.class
  visible: true
  learner_created: true
- name: src/encryptdecrypt/Shift.class
  visible: true
  learner_created: true
- name: src/encryptdecrypt/FindingStrategy.class
  visible: true
  learner_created: true
- name: src/encryptdecrypt/Unicode.class
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/46/stages/250/implement#comment
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/46/stages/250/implement">JetBrains
    Academy</a>
  time: Tue, 17 Nov 2020 21:32:38 UTC
record: -1
